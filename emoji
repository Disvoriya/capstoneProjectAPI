const emojiCategories = {
  smileys: emojiData.smileys,
  people: emojiData.people,
  gestures: emojiData.gestures,
  accessories: emojiData.accessories,
  animals: emojiData.animals,
  food: emojiData.food,
  sports: emojiData.sports,
  travel: emojiData.travel,
};
const showEmojiPicker = ref(false);

const toggleEmojiPicker = () => {
  showEmojiPicker.value = !showEmojiPicker.value;
};

const addEmoji = (emoji) => {
  newMessage.value += emoji;
  showEmojiPicker.value = false;
};


// html

          <div v-if="showEmojiPicker" class="emoji-picker scrollable">
            <div v-for="(emojis, category) in emojiCategories" :key="category">
              <h3>{{ category }}</h3>
              <div>
                <span
                  v-for="(emoji, index) in emojis"
                  :key="index"
                  @click="addEmoji(emoji)"
                >
                    {{ emoji }}
                </span>
              </div>
            </div>
          </div>

          <div class="bg-emoji-smile">
            <i class="bi bi-emoji-smile" @click="toggleEmojiPicker"></i>
          </div>



          const toggleNotifications = async () => {
            showNotifications.value = !showNotifications.value;

            if (showNotifications.value) {
              try {
                const unreadNotifications = notifications.value.filter(notification => notification.read_at === null);
                for (const notification of unreadNotifications) {
                  await axios.post(`${host}/notification/${notification.id}`, {}, {
                    headers: {
                      Authorization: `Bearer ${PersonaluserToken.value}`,
                    },
                  });
                }
                unreadNotifications.forEach(notification => {
                  notification.read_at = new Date();
                });
              } catch (error) {
                console.error('Ошибка при обновлении уведомлений:', error);
              }
            }
          };

          const unreadCount = computed(() => {
            return notifications.value.filter(notification => notification.read_at === null).length;
          });

          const selectUser = (user) => {
            activeUser.value = user;
            fetchMessages(user.user.id);
          }
